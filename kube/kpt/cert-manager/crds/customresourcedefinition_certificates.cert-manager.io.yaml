# Source: cert-manager/templates/templates.out
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: certificates.cert-manager.io
  labels:
    app: 'cert-manager'
    app.kubernetes.io/instance: 'cert-manager'
    app.kubernetes.io/name: 'cert-manager'
    # Generated labels
    app.kubernetes.io/version: "v1.5.0"
  annotations:
    cert-manager.io/inject-ca-from-secret: 'cert-manager/cert-manager-webhook-ca'
spec:
  conversion:
    # a Webhook strategy instruct API server to call an external webhook for any conversion between custom resources.
    strategy: Webhook
    # webhookClientConfig is required when strategy is `Webhook` and it configures the webhook endpoint to be called by API server.
    webhook:
      clientConfig:
        #
        service:
          name: 'cert-manager-webhook'
          namespace: "cert-manager"
          path: /convert
          #
      # We don't actually support `v1beta1` but is listed here as it is a
      # required value for [Kubernetes v1.16](kubernetes/kubernetes#82023). The
      # API server reads the supported versions in order, so _should always_
      # attempt a `v1` request which is understood by the cert-manager webhook.
      # Any `v1beta1` request will return an error and fail closed for that
      # resource (the whole object request is rejected).
      # When we no longer support v1.16 we can remove `v1beta1` from this list.
      conversionReviewVersions: ["v1", "v1beta1"]
  group: cert-manager.io
  names:
    kind: Certificate
    categories:
    - cert-manager
    listKind: CertificateList
    plural: certificates
    shortNames:
    - cert
    - certs
    singular: certificate
  scope: Namespaced
  versions:
  - name: v1alpha2
    additionalPrinterColumns:
    - name: Ready
      type: string
      jsonPath: .status.conditions[?(@.type=="Ready")].status
    - name: Secret
      type: string
      jsonPath: .spec.secretName
    - name: Issuer
      type: string
      priority: 1
      jsonPath: .spec.issuerRef.name
    - name: Status
      type: string
      priority: 1
      jsonPath: .status.conditions[?(@.type=="Ready")].message
    - name: Age
      type: date
      description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
      jsonPath: .metadata.creationTimestamp
    schema:
      openAPIV3Schema:
        type: object
        description: "A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`)."
        properties:
          apiVersion:
            type: string
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          kind:
            type: string
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          metadata:
            type: object
          spec:
            type: object
            description: Desired state of the Certificate resource.
            properties:
              revisionHistoryLimit:
                type: integer
                description: revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
                format: int32
              commonName:
                type: string
                description: 'CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4'
              dnsNames:
                type: array
                description: DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
                items:
                  type: string
              duration:
                type: string
                description: The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
              emailSANs:
                type: array
                description: EmailSANs is a list of email subjectAltNames to be set on the Certificate.
                items:
                  type: string
              encodeUsagesInRequest:
                type: boolean
                description: EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
              ipAddresses:
                type: array
                description: IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
                items:
                  type: string
              isCA:
                type: boolean
                description: IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
              issuerRef:
                type: object
                description: IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
                properties:
                  name:
                    type: string
                    description: Name of the resource being referred to.
                  kind:
                    type: string
                    description: Kind of the resource being referred to.
                  group:
                    type: string
                    description: Group of the resource being referred to.
                required:
                - name
              keyAlgorithm:
                type: string
                description: KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `rsa` or `ecdsa` If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for `ecdsa` key algorithm and key size of 2048 will be used for `rsa` key algorithm.
                enum:
                - rsa
                - ecdsa
              keyEncoding:
                type: string
                description: KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are `pkcs1` and `pkcs8` standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then `pkcs1` will be used by default.
                enum:
                - pkcs1
                - pkcs8
              keySize:
                type: integer
                description: KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `rsa`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ecdsa`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
              keystores:
                type: object
                description: Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
                properties:
                  jks:
                    type: object
                    description: JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
                    properties:
                      create:
                        type: boolean
                        description: Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
                      passwordSecretRef:
                        type: object
                        description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
                        properties:
                          name:
                            type: string
                            description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          key:
                            type: string
                            description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                        required:
                        - name
                    required:
                    - create
                    - passwordSecretRef
                  pkcs12:
                    type: object
                    description: PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
                    properties:
                      create:
                        type: boolean
                        description: Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
                      passwordSecretRef:
                        type: object
                        description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
                        properties:
                          name:
                            type: string
                            description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          key:
                            type: string
                            description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                        required:
                        - name
                    required:
                    - create
                    - passwordSecretRef
              organization:
                type: array
                description: Organization is a list of organizations to be used on the Certificate.
                items:
                  type: string
              privateKey:
                type: object
                description: Options to control private keys used for the Certificate.
                properties:
                  rotationPolicy:
                    type: string
                    description: RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
              renewBefore:
                type: string
                description: How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
              secretName:
                type: string
                description: SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
              secretTemplate:
                type: object
                description: SecretTemplate defines annotations and labels to be propagated to the Kubernetes Secret when it is created or updated. Once created, labels and annotations are not yet removed from the Secret when they are removed from the template. See https://github.com/jetstack/cert-manager/issues/4292
                properties:
                  labels:
                    type: object
                    additionalProperties:
                      type: string
                    description: Labels is a key value map to be copied to the target Kubernetes Secret.
                  annotations:
                    type: object
                    additionalProperties:
                      type: string
                    description: Annotations is a key value map to be copied to the target Kubernetes Secret.
              subject:
                type: object
                description: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
                properties:
                  countries:
                    type: array
                    description: Countries to be used on the Certificate.
                    items:
                      type: string
                  localities:
                    type: array
                    description: Cities to be used on the Certificate.
                    items:
                      type: string
                  organizationalUnits:
                    type: array
                    description: Organizational Units to be used on the Certificate.
                    items:
                      type: string
                  postalCodes:
                    type: array
                    description: Postal codes to be used on the Certificate.
                    items:
                      type: string
                  provinces:
                    type: array
                    description: State/Provinces to be used on the Certificate.
                    items:
                      type: string
                  serialNumber:
                    type: string
                    description: Serial number to be used on the Certificate.
                  streetAddresses:
                    type: array
                    description: Street addresses to be used on the Certificate.
                    items:
                      type: string
              uriSANs:
                type: array
                description: URISANs is a list of URI subjectAltNames to be set on the Certificate.
                items:
                  type: string
              usages:
                type: array
                description: Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
                items:
                  type: string
                  description: 'KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: "signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"'
                  enum:
                  - signing
                  - digital signature
                  - content commitment
                  - key encipherment
                  - key agreement
                  - data encipherment
                  - cert sign
                  - crl sign
                  - encipher only
                  - decipher only
                  - any
                  - server auth
                  - client auth
                  - code signing
                  - email protection
                  - s/mime
                  - ipsec end system
                  - ipsec tunnel
                  - ipsec user
                  - timestamping
                  - ocsp signing
                  - microsoft sgc
                  - netscape sgc
            required:
            - issuerRef
            - secretName
          status:
            type: object
            description: Status of the Certificate. This is set and managed automatically.
            properties:
              revision:
                type: integer
                description: "The current 'revision' of the certificate as issued. \n When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. \n Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. \n Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field."
              conditions:
                type: array
                description: List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
                items:
                  type: object
                  description: CertificateCondition contains condition information for an Certificate.
                  properties:
                    type:
                      type: string
                      description: Type of the condition, known values are (`Ready`, `Issuing`).
                    status:
                      type: string
                      description: Status of the condition, one of (`True`, `False`, `Unknown`).
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    lastTransitionTime:
                      type: string
                      description: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
                      format: date-time
                    message:
                      type: string
                      description: Message is a human readable description of the details of the last transition, complementing reason.
                    observedGeneration:
                      type: integer
                      description: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
                      format: int64
                    reason:
                      type: string
                      description: Reason is a brief machine readable explanation for the condition's last transition.
                  required:
                  - status
                  - type
              lastFailureTime:
                type: string
                description: LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
                format: date-time
              nextPrivateKeySecretName:
                type: string
                description: The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
              notAfter:
                type: string
                description: The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
                format: date-time
              notBefore:
                type: string
                description: The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
                format: date-time
              renewalTime:
                type: string
                description: RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
                format: date-time
    served: true
    storage: false
    subresources:
      status: {}
  - name: v1alpha3
    additionalPrinterColumns:
    - name: Ready
      type: string
      jsonPath: .status.conditions[?(@.type=="Ready")].status
    - name: Secret
      type: string
      jsonPath: .spec.secretName
    - name: Issuer
      type: string
      priority: 1
      jsonPath: .spec.issuerRef.name
    - name: Status
      type: string
      priority: 1
      jsonPath: .status.conditions[?(@.type=="Ready")].message
    - name: Age
      type: date
      description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
      jsonPath: .metadata.creationTimestamp
    schema:
      openAPIV3Schema:
        type: object
        description: "A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`)."
        properties:
          apiVersion:
            type: string
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          kind:
            type: string
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          metadata:
            type: object
          spec:
            type: object
            description: Desired state of the Certificate resource.
            properties:
              revisionHistoryLimit:
                type: integer
                description: revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
                format: int32
              commonName:
                type: string
                description: 'CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4'
              dnsNames:
                type: array
                description: DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
                items:
                  type: string
              duration:
                type: string
                description: The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
              emailSANs:
                type: array
                description: EmailSANs is a list of email subjectAltNames to be set on the Certificate.
                items:
                  type: string
              encodeUsagesInRequest:
                type: boolean
                description: EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
              ipAddresses:
                type: array
                description: IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
                items:
                  type: string
              isCA:
                type: boolean
                description: IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
              issuerRef:
                type: object
                description: IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
                properties:
                  name:
                    type: string
                    description: Name of the resource being referred to.
                  kind:
                    type: string
                    description: Kind of the resource being referred to.
                  group:
                    type: string
                    description: Group of the resource being referred to.
                required:
                - name
              keyAlgorithm:
                type: string
                description: KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `rsa` or `ecdsa` If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for `ecdsa` key algorithm and key size of 2048 will be used for `rsa` key algorithm.
                enum:
                - rsa
                - ecdsa
              keyEncoding:
                type: string
                description: KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are `pkcs1` and `pkcs8` standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then `pkcs1` will be used by default.
                enum:
                - pkcs1
                - pkcs8
              keySize:
                type: integer
                description: KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `rsa`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ecdsa`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
              keystores:
                type: object
                description: Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
                properties:
                  jks:
                    type: object
                    description: JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
                    properties:
                      create:
                        type: boolean
                        description: Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority.
                      passwordSecretRef:
                        type: object
                        description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
                        properties:
                          name:
                            type: string
                            description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          key:
                            type: string
                            description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                        required:
                        - name
                    required:
                    - create
                    - passwordSecretRef
                  pkcs12:
                    type: object
                    description: PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
                    properties:
                      create:
                        type: boolean
                        description: Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority.
                      passwordSecretRef:
                        type: object
                        description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
                        properties:
                          name:
                            type: string
                            description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          key:
                            type: string
                            description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                        required:
                        - name
                    required:
                    - create
                    - passwordSecretRef
              privateKey:
                type: object
                description: Options to control private keys used for the Certificate.
                properties:
                  rotationPolicy:
                    type: string
                    description: RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
              renewBefore:
                type: string
                description: How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
              secretName:
                type: string
                description: SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
              secretTemplate:
                type: object
                description: SecretTemplate defines annotations and labels to be propagated to the Kubernetes Secret when it is created or updated. Once created, labels and annotations are not yet removed from the Secret when they are removed from the template. See https://github.com/jetstack/cert-manager/issues/4292
                properties:
                  labels:
                    type: object
                    additionalProperties:
                      type: string
                    description: Labels is a key value map to be copied to the target Kubernetes Secret.
                  annotations:
                    type: object
                    additionalProperties:
                      type: string
                    description: Annotations is a key value map to be copied to the target Kubernetes Secret.
              subject:
                type: object
                description: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
                properties:
                  countries:
                    type: array
                    description: Countries to be used on the Certificate.
                    items:
                      type: string
                  localities:
                    type: array
                    description: Cities to be used on the Certificate.
                    items:
                      type: string
                  organizationalUnits:
                    type: array
                    description: Organizational Units to be used on the Certificate.
                    items:
                      type: string
                  organizations:
                    type: array
                    description: Organizations to be used on the Certificate.
                    items:
                      type: string
                  postalCodes:
                    type: array
                    description: Postal codes to be used on the Certificate.
                    items:
                      type: string
                  provinces:
                    type: array
                    description: State/Provinces to be used on the Certificate.
                    items:
                      type: string
                  serialNumber:
                    type: string
                    description: Serial number to be used on the Certificate.
                  streetAddresses:
                    type: array
                    description: Street addresses to be used on the Certificate.
                    items:
                      type: string
              uriSANs:
                type: array
                description: URISANs is a list of URI subjectAltNames to be set on the Certificate.
                items:
                  type: string
              usages:
                type: array
                description: Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
                items:
                  type: string
                  description: 'KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: "signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"'
                  enum:
                  - signing
                  - digital signature
                  - content commitment
                  - key encipherment
                  - key agreement
                  - data encipherment
                  - cert sign
                  - crl sign
                  - encipher only
                  - decipher only
                  - any
                  - server auth
                  - client auth
                  - code signing
                  - email protection
                  - s/mime
                  - ipsec end system
                  - ipsec tunnel
                  - ipsec user
                  - timestamping
                  - ocsp signing
                  - microsoft sgc
                  - netscape sgc
            required:
            - issuerRef
            - secretName
          status:
            type: object
            description: Status of the Certificate. This is set and managed automatically.
            properties:
              revision:
                type: integer
                description: "The current 'revision' of the certificate as issued. \n When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. \n Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. \n Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field."
              conditions:
                type: array
                description: List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
                items:
                  type: object
                  description: CertificateCondition contains condition information for an Certificate.
                  properties:
                    type:
                      type: string
                      description: Type of the condition, known values are (`Ready`, `Issuing`).
                    status:
                      type: string
                      description: Status of the condition, one of (`True`, `False`, `Unknown`).
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    lastTransitionTime:
                      type: string
                      description: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
                      format: date-time
                    message:
                      type: string
                      description: Message is a human readable description of the details of the last transition, complementing reason.
                    observedGeneration:
                      type: integer
                      description: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
                      format: int64
                    reason:
                      type: string
                      description: Reason is a brief machine readable explanation for the condition's last transition.
                  required:
                  - status
                  - type
              lastFailureTime:
                type: string
                description: LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
                format: date-time
              nextPrivateKeySecretName:
                type: string
                description: The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
              notAfter:
                type: string
                description: The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
                format: date-time
              notBefore:
                type: string
                description: The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
                format: date-time
              renewalTime:
                type: string
                description: RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
                format: date-time
    served: true
    storage: false
    subresources:
      status: {}
  - name: v1beta1
    additionalPrinterColumns:
    - name: Ready
      type: string
      jsonPath: .status.conditions[?(@.type=="Ready")].status
    - name: Secret
      type: string
      jsonPath: .spec.secretName
    - name: Issuer
      type: string
      priority: 1
      jsonPath: .spec.issuerRef.name
    - name: Status
      type: string
      priority: 1
      jsonPath: .status.conditions[?(@.type=="Ready")].message
    - name: Age
      type: date
      description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
      jsonPath: .metadata.creationTimestamp
    schema:
      openAPIV3Schema:
        type: object
        description: "A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`)."
        properties:
          apiVersion:
            type: string
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          kind:
            type: string
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          metadata:
            type: object
          spec:
            type: object
            description: Desired state of the Certificate resource.
            properties:
              revisionHistoryLimit:
                type: integer
                description: revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
                format: int32
              commonName:
                type: string
                description: 'CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4'
              dnsNames:
                type: array
                description: DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
                items:
                  type: string
              duration:
                type: string
                description: The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
              emailSANs:
                type: array
                description: EmailSANs is a list of email subjectAltNames to be set on the Certificate.
                items:
                  type: string
              encodeUsagesInRequest:
                type: boolean
                description: EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
              ipAddresses:
                type: array
                description: IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
                items:
                  type: string
              isCA:
                type: boolean
                description: IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
              issuerRef:
                type: object
                description: IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
                properties:
                  name:
                    type: string
                    description: Name of the resource being referred to.
                  kind:
                    type: string
                    description: Kind of the resource being referred to.
                  group:
                    type: string
                    description: Group of the resource being referred to.
                required:
                - name
              keystores:
                type: object
                description: Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
                properties:
                  jks:
                    type: object
                    description: JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
                    properties:
                      create:
                        type: boolean
                        description: Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
                      passwordSecretRef:
                        type: object
                        description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
                        properties:
                          name:
                            type: string
                            description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          key:
                            type: string
                            description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                        required:
                        - name
                    required:
                    - create
                    - passwordSecretRef
                  pkcs12:
                    type: object
                    description: PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
                    properties:
                      create:
                        type: boolean
                        description: Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
                      passwordSecretRef:
                        type: object
                        description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
                        properties:
                          name:
                            type: string
                            description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          key:
                            type: string
                            description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                        required:
                        - name
                    required:
                    - create
                    - passwordSecretRef
              privateKey:
                type: object
                description: Options to control private keys used for the Certificate.
                properties:
                  algorithm:
                    type: string
                    description: Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm.
                    enum:
                    - RSA
                    - ECDSA
                  encoding:
                    type: string
                    description: The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
                    enum:
                    - PKCS1
                    - PKCS8
                  rotationPolicy:
                    type: string
                    description: RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
                  size:
                    type: integer
                    description: Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
              renewBefore:
                type: string
                description: How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
              secretName:
                type: string
                description: SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
              secretTemplate:
                type: object
                description: SecretTemplate defines annotations and labels to be propagated to the Kubernetes Secret when it is created or updated. Once created, labels and annotations are not yet removed from the Secret when they are removed from the template. See https://github.com/jetstack/cert-manager/issues/4292
                properties:
                  labels:
                    type: object
                    additionalProperties:
                      type: string
                    description: Labels is a key value map to be copied to the target Kubernetes Secret.
                  annotations:
                    type: object
                    additionalProperties:
                      type: string
                    description: Annotations is a key value map to be copied to the target Kubernetes Secret.
              subject:
                type: object
                description: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
                properties:
                  countries:
                    type: array
                    description: Countries to be used on the Certificate.
                    items:
                      type: string
                  localities:
                    type: array
                    description: Cities to be used on the Certificate.
                    items:
                      type: string
                  organizationalUnits:
                    type: array
                    description: Organizational Units to be used on the Certificate.
                    items:
                      type: string
                  organizations:
                    type: array
                    description: Organizations to be used on the Certificate.
                    items:
                      type: string
                  postalCodes:
                    type: array
                    description: Postal codes to be used on the Certificate.
                    items:
                      type: string
                  provinces:
                    type: array
                    description: State/Provinces to be used on the Certificate.
                    items:
                      type: string
                  serialNumber:
                    type: string
                    description: Serial number to be used on the Certificate.
                  streetAddresses:
                    type: array
                    description: Street addresses to be used on the Certificate.
                    items:
                      type: string
              uriSANs:
                type: array
                description: URISANs is a list of URI subjectAltNames to be set on the Certificate.
                items:
                  type: string
              usages:
                type: array
                description: Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
                items:
                  type: string
                  description: 'KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: "signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"'
                  enum:
                  - signing
                  - digital signature
                  - content commitment
                  - key encipherment
                  - key agreement
                  - data encipherment
                  - cert sign
                  - crl sign
                  - encipher only
                  - decipher only
                  - any
                  - server auth
                  - client auth
                  - code signing
                  - email protection
                  - s/mime
                  - ipsec end system
                  - ipsec tunnel
                  - ipsec user
                  - timestamping
                  - ocsp signing
                  - microsoft sgc
                  - netscape sgc
            required:
            - issuerRef
            - secretName
          status:
            type: object
            description: Status of the Certificate. This is set and managed automatically.
            properties:
              revision:
                type: integer
                description: "The current 'revision' of the certificate as issued. \n When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. \n Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. \n Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field."
              conditions:
                type: array
                description: List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
                items:
                  type: object
                  description: CertificateCondition contains condition information for an Certificate.
                  properties:
                    type:
                      type: string
                      description: Type of the condition, known values are (`Ready`, `Issuing`).
                    status:
                      type: string
                      description: Status of the condition, one of (`True`, `False`, `Unknown`).
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    lastTransitionTime:
                      type: string
                      description: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
                      format: date-time
                    message:
                      type: string
                      description: Message is a human readable description of the details of the last transition, complementing reason.
                    observedGeneration:
                      type: integer
                      description: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
                      format: int64
                    reason:
                      type: string
                      description: Reason is a brief machine readable explanation for the condition's last transition.
                  required:
                  - status
                  - type
              lastFailureTime:
                type: string
                description: LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
                format: date-time
              nextPrivateKeySecretName:
                type: string
                description: The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
              notAfter:
                type: string
                description: The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
                format: date-time
              notBefore:
                type: string
                description: The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
                format: date-time
              renewalTime:
                type: string
                description: RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
                format: date-time
        required:
        - spec
    served: true
    storage: false
    subresources:
      status: {}
  - name: v1
    additionalPrinterColumns:
    - name: Ready
      type: string
      jsonPath: .status.conditions[?(@.type=="Ready")].status
    - name: Secret
      type: string
      jsonPath: .spec.secretName
    - name: Issuer
      type: string
      priority: 1
      jsonPath: .spec.issuerRef.name
    - name: Status
      type: string
      priority: 1
      jsonPath: .status.conditions[?(@.type=="Ready")].message
    - name: Age
      type: date
      description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
      jsonPath: .metadata.creationTimestamp
    schema:
      openAPIV3Schema:
        type: object
        description: "A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`)."
        properties:
          apiVersion:
            type: string
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          kind:
            type: string
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          metadata:
            type: object
          spec:
            type: object
            description: Desired state of the Certificate resource.
            properties:
              revisionHistoryLimit:
                type: integer
                description: revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
                format: int32
              commonName:
                type: string
                description: 'CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4'
              dnsNames:
                type: array
                description: DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
                items:
                  type: string
              duration:
                type: string
                description: The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
              emailAddresses:
                type: array
                description: EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
                items:
                  type: string
              encodeUsagesInRequest:
                type: boolean
                description: EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
              ipAddresses:
                type: array
                description: IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
                items:
                  type: string
              isCA:
                type: boolean
                description: IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
              issuerRef:
                type: object
                description: IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
                properties:
                  name:
                    type: string
                    description: Name of the resource being referred to.
                  kind:
                    type: string
                    description: Kind of the resource being referred to.
                  group:
                    type: string
                    description: Group of the resource being referred to.
                required:
                - name
              keystores:
                type: object
                description: Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
                properties:
                  jks:
                    type: object
                    description: JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
                    properties:
                      create:
                        type: boolean
                        description: Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
                      passwordSecretRef:
                        type: object
                        description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
                        properties:
                          name:
                            type: string
                            description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          key:
                            type: string
                            description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                        required:
                        - name
                    required:
                    - create
                    - passwordSecretRef
                  pkcs12:
                    type: object
                    description: PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
                    properties:
                      create:
                        type: boolean
                        description: Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
                      passwordSecretRef:
                        type: object
                        description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
                        properties:
                          name:
                            type: string
                            description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          key:
                            type: string
                            description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                        required:
                        - name
                    required:
                    - create
                    - passwordSecretRef
              privateKey:
                type: object
                description: Options to control private keys used for the Certificate.
                properties:
                  algorithm:
                    type: string
                    description: Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.
                    enum:
                    - RSA
                    - ECDSA
                    - Ed25519
                  encoding:
                    type: string
                    description: The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
                    enum:
                    - PKCS1
                    - PKCS8
                  rotationPolicy:
                    type: string
                    description: RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
                  size:
                    type: integer
                    description: Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.
              renewBefore:
                type: string
                description: How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
              secretName:
                type: string
                description: SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
              secretTemplate:
                type: object
                description: SecretTemplate defines annotations and labels to be propagated to the Kubernetes Secret when it is created or updated. Once created, labels and annotations are not yet removed from the Secret when they are removed from the template. See https://github.com/jetstack/cert-manager/issues/4292
                properties:
                  labels:
                    type: object
                    additionalProperties:
                      type: string
                    description: Labels is a key value map to be copied to the target Kubernetes Secret.
                  annotations:
                    type: object
                    additionalProperties:
                      type: string
                    description: Annotations is a key value map to be copied to the target Kubernetes Secret.
              subject:
                type: object
                description: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
                properties:
                  countries:
                    type: array
                    description: Countries to be used on the Certificate.
                    items:
                      type: string
                  localities:
                    type: array
                    description: Cities to be used on the Certificate.
                    items:
                      type: string
                  organizationalUnits:
                    type: array
                    description: Organizational Units to be used on the Certificate.
                    items:
                      type: string
                  organizations:
                    type: array
                    description: Organizations to be used on the Certificate.
                    items:
                      type: string
                  postalCodes:
                    type: array
                    description: Postal codes to be used on the Certificate.
                    items:
                      type: string
                  provinces:
                    type: array
                    description: State/Provinces to be used on the Certificate.
                    items:
                      type: string
                  serialNumber:
                    type: string
                    description: Serial number to be used on the Certificate.
                  streetAddresses:
                    type: array
                    description: Street addresses to be used on the Certificate.
                    items:
                      type: string
              uris:
                type: array
                description: URIs is a list of URI subjectAltNames to be set on the Certificate.
                items:
                  type: string
              usages:
                type: array
                description: Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
                items:
                  type: string
                  description: 'KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: "signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"'
                  enum:
                  - signing
                  - digital signature
                  - content commitment
                  - key encipherment
                  - key agreement
                  - data encipherment
                  - cert sign
                  - crl sign
                  - encipher only
                  - decipher only
                  - any
                  - server auth
                  - client auth
                  - code signing
                  - email protection
                  - s/mime
                  - ipsec end system
                  - ipsec tunnel
                  - ipsec user
                  - timestamping
                  - ocsp signing
                  - microsoft sgc
                  - netscape sgc
            required:
            - issuerRef
            - secretName
          status:
            type: object
            description: Status of the Certificate. This is set and managed automatically.
            properties:
              revision:
                type: integer
                description: "The current 'revision' of the certificate as issued. \n When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. \n Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. \n Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field."
              conditions:
                type: array
                description: List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
                items:
                  type: object
                  description: CertificateCondition contains condition information for an Certificate.
                  properties:
                    type:
                      type: string
                      description: Type of the condition, known values are (`Ready`, `Issuing`).
                    status:
                      type: string
                      description: Status of the condition, one of (`True`, `False`, `Unknown`).
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    lastTransitionTime:
                      type: string
                      description: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
                      format: date-time
                    message:
                      type: string
                      description: Message is a human readable description of the details of the last transition, complementing reason.
                    observedGeneration:
                      type: integer
                      description: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
                      format: int64
                    reason:
                      type: string
                      description: Reason is a brief machine readable explanation for the condition's last transition.
                  required:
                  - status
                  - type
              lastFailureTime:
                type: string
                description: LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
                format: date-time
              nextPrivateKeySecretName:
                type: string
                description: The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
              notAfter:
                type: string
                description: The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
                format: date-time
              notBefore:
                type: string
                description: The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
                format: date-time
              renewalTime:
                type: string
                description: RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
                format: date-time
        required:
        - spec
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
