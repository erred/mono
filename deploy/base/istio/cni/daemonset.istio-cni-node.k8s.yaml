apiVersion: apps/v1
# Source: cni/templates/daemonset.yaml
# This manifest installs the Istio install-cni container, as well
# as the Istio CNI plugin and config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
metadata:
  name: istio-cni-node
spec:
  template:
    metadata:
      labels:
        sidecar.istio.io/inject: "false"
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 5
      serviceAccountName: istio-cni
      priorityClassName: system-node-critical
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        # This container installs the Istio CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: "docker.io/istio/install-cni:1.12.1"
          command: ["install-cni"]
          env:
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: istio-cni-config
                  key: cni_network_config
            - name: CNI_NET_DIR
              value: /etc/cni/net.d
            # Deploy as a standalone CNI plugin or as chained?
            - name: CHAINED_CNI_PLUGIN
              value: "true"
            - name: REPAIR_ENABLED
              value: "true"
            - name: REPAIR_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: REPAIR_LABEL_PODS
              value: "true"
            # Set to true to enable pod deletion
            - name: REPAIR_DELETE_PODS
              value: "true"
            - name: REPAIR_RUN_AS_DAEMON
              value: "true"
            - name: REPAIR_SIDECAR_ANNOTATION
              value: "sidecar.istio.io/status"
            - name: REPAIR_INIT_CONTAINER_NAME
              value: "istio-validation"
            - name: REPAIR_BROKEN_POD_LABEL_KEY
              value: "cni.istio.io/uninitialized"
            - name: REPAIR_BROKEN_POD_LABEL_VALUE
              value: "true"
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - name: cni-bin-dir
              mountPath: /host/opt/cni/bin
            - name: cni-net-dir
              mountPath: /host/etc/cni/net.d
            - name: cni-log-dir
              mountPath: /var/run/istio-cni
          livenessProbe:
            httpGet:
              port: 8000
              path: /healthz
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              port: 8000
              path: /readyz
          securityContext:
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
      volumes:
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Used for UDS log
        - name: cni-log-dir
          hostPath:
            path: /var/run/istio-cni
      tolerations:
        # Make sure istio-cni-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
