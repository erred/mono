receivers:
  filelog:
    include:
      - /host/var/log/pods/*/*/*.log
    exclude:
      - /var/log/pods/otelcol*/*/*.log
    start_at: end
    include_file_path: true
    include_file_name: false
    operators:
      # Find out which format is used by kubernetes
      - type: router
        id: get-format
        routes:
          - output: parser-docker
            expr: '$$body matches "^\\{"'
          - output: parser-crio
            expr: '$$body matches "^[^ Z]+ "'
          - output: parser-containerd
            expr: '$$body matches "^[^ Z]+Z"'
      # Parse CRI-O format
      - type: regex_parser
        id: parser-crio
        regex: "^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) (?P<log>.*)$"
        output: extract_metadata_from_filepath
        timestamp:
          parse_from: time
          layout_type: gotime
          layout: "2006-01-02T15:04:05.000000000-07:00"
      # Parse CRI-Containerd format
      - type: regex_parser
        id: parser-containerd
        regex: "^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) (?P<log>.*)$"
        output: extract_metadata_from_filepath
        timestamp:
          parse_from: time
          layout: "%Y-%m-%dT%H:%M:%S.%LZ"
      # Parse Docker format
      - type: json_parser
        id: parser-docker
        output: extract_metadata_from_filepath
        timestamp:
          parse_from: time
          layout: "%Y-%m-%dT%H:%M:%S.%LZ"
      # Extract metadata from file path
      - type: regex_parser
        id: extract_metadata_from_filepath
        regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<run_id>\d+)\.log$'
        parse_from: $$attributes["file.path"]
      # Move out attributes to Attributes
      - type: metadata
        attributes:
          stream: "EXPR($.stream)"
          k8s.container.name: "EXPR($.container_name)"
          k8s.namespace.name: "EXPR($.namespace)"
          k8s.pod.name: "EXPR($.pod_name)"
          run_id: "EXPR($.run_id)"
          k8s.pod.uid: "EXPR($.uid)"
      # Clean up log body
      - type: restructure
        id: clean-up-log-body
        ops:
          - move:
              from: log
              to: $
  hostmetrics:
    scrapers:
      cpu:
      disk:
      load:
      # filesystem:
      memory:
      network:
      processes:
      # process:
  otlp:
    protocols:
      grpc:

processors:
  batch:
  memory_limiter:
    check_interval: 1s
    limit_mib: 2048

exporters:
  logging:
    loglevel: debug
  loki:
    endpoint: http://loki.loki.svc/loki/api/v1/push
    format: json
    labels:
      resource:
      attributes:
        k8s.container.name: k8s_container
        k8s.namespace.name: k8s_namespace
        k8s.pod.name: k8s_pod_name
        k8s.pod.uid: k8s_pod_uid
  jaeger:
    endpoint: jaeger.jaeger.svc:14250
    tls:
      insecure: true
  prometheusremotewrite:
    endpoint: http://prometheus.prometheus.svc/api/v1/write
    tls:
      insecure: true

extensions:
  memory_ballast:
    size_mib: 1024

service:
  extensions:
    - memory_ballast
  pipelines:
    traces:
      receivers:
        - otlp
      processors:
        - batch
        - memory_limiter
      exporters:
        - jaeger
    metrics:
      receivers:
        - otlp
        - hostmetrics
      processors:
        - batch
        - memory_limiter
      exporters:
        - prometheusremotewrite
    logs:
      receivers:
        - filelog
        - otlp
      processors:
        - batch
        - memory_limiter
      exporters:
        # - logging
        - loki
